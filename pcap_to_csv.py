from scapy.all import *
import csv
from pathlib import Path
import os

#Gets smac(Ethernet src)
def get_smac(pkt):
    smac = ""
    if pkt.haslayer(Ether):
        smac = pkt[Ether].src
    return smac

#Gets dmac(Ethernet dst)
def get_dmac(pkt):
    dmac = ""
    if pkt.haslayer(Ether):
        dmac = pkt[Ether].dst
    return dmac

#Gets source IP Address
def get_source_ip(pkt):
    source = ""
    if IP in pkt:
        source=pkt[IP].src
    return source

#Gets destination IP Address
def get_dest_ip(pkt):
    destination = ""
    if IP in pkt:
        destination=pkt[IP].dst
    return destination

#Gets ttl for IP
def get_ttl(pkt):
    ttl = ""
    if pkt.haslayer('IP'):
        ttl = pkt[IP].ttl
    return ttl

def tcpProcess(pkt):
    length = (len(pkt))
    time = pkt.time
    sMac = get_smac(pkt)
    dMac = get_dmac(pkt)
    srcIP = get_source_ip(pkt)
    dstIP = get_dest_ip(pkt)
    ttl = get_ttl(pkt)
    sPort = pkt[TCP].sport
    dPort = pkt[TCP].dport
    seq = pkt[TCP].seq
    ack = pkt[TCP].ack
    protocol = 'TCP'
    return [time, sMac, dMac, srcIP, dstIP, ttl, sPort, dPort, seq, ack, protocol, length]

def arpProcess(pkt):
    length = (len(pkt))
    time = pkt.time
    smac = get_smac(pkt)
    dmac = get_dmac(pkt)
    hwsrc = pkt[ARP].hwsrc
    psrc = pkt[ARP].psrc
    hwdst = pkt[ARP].hwdst
    pdst = pkt[ARP].pdst
    protocol = 'ARP'
    return [time, smac, dmac, hwsrc, psrc, hwdst, pdst, protocol, length]

def udpProcess(pkt):
    length = (len(pkt))
    time = pkt.time
    sMac = get_smac(pkt)
    dMac = get_dmac(pkt)
    srcIP = get_source_ip(pkt)
    dstIP = get_dest_ip(pkt)
    ttl = get_ttl(pkt)
    sport = pkt[UDP].sport
    dport = pkt[UDP].dport
    protocol = 'UDP'
    info = ""
    #Checks if the packet has layer NBT Datagram Packet and Pulls info for NBT packet if so
    if pkt.haslayer('NBT Datagram Packet'):
        info = pkt['NBT Datagram Packet'].show(dump=True)
        info = info[:info.index('###[ Raw')]
    return [time, sMac, dMac, srcIP, dstIP, ttl, sport, dport, protocol, length, info]

# Get the csv writers and process packet
def customAction(tcp_writer, arp_writer, udp_writer):
    # Process one packet to get info to write
    def processPacket(pkt):
        #Check if the pakcet has layer TCP if so writes its info to TCP.csv
        if pkt.haslayer('TCP'):
            tcp_writer.writerow(tcpProcess(pkt))   

        #Checks if the packet has layer ARP if so writes its info to ARP.csv
        elif pkt.haslayer('ARP'):
            arp_writer.writerow(arpProcess(pkt))

        #Checks if the packet has layer UDP and if so writes its info to UDP.csv
        elif pkt.haslayer('UDP'):
            
            udp_writer.writerow(udpProcess(pkt))
    return processPacket
                
                

def process_pcap(fp):
    try:
        print("Working with "+fp)
        # Creating 3 file names
        p = Path(fp)
        # go to the parent path of the current file
        dir = p.parent  
        # get the stem name of file 
        # for ex: stem name of "hello.pcap" is "hello", stem name of "./haha/hello.pcap" is "hello"
        f_stem = p.stem  
        print (dir)
        print(f_stem)
        # Craft the csv file name by adding the parent directory with stem name with according protocols
        # Ex: filepath = "./haha/hello.pcap" -> ARP_FILENAME = "./haha/hello_ARP.csv"
        ARP_FILENAME = os.path.join(dir, f_stem+"_ARP.csv")
        TCP_FILENAME = os.path.join(dir, f_stem+"_TCP.csv")
        UDP_FILENAME = os.path.join(dir, f_stem+"_UDP.csv")
        print("Creating 3 files: ",ARP_FILENAME,", ",TCP_FILENAME,", ",UDP_FILENAME) 

        # Open files to write (the same as Ryan's code)
        with open(TCP_FILENAME, 'w') as tcp_csvfile, open(ARP_FILENAME, "w") as arp_csvfile, open(UDP_FILENAME, 'w') as udp_csvfile:
            # open csv writer
            tcp_writer = csv.writer(tcp_csvfile)
            arp_writer = csv.writer(arp_csvfile)
            udp_writer = csv.writer(udp_csvfile)
            # write the headers
            tcp_writer.writerow(['Time', 'smac', 'dmac', 'srcIP', 'dstIP', 'ttl', 'sport', 'dport', 'seq', 'ack', 'Protocol', 'Length'])
            arp_writer.writerow(['Time', 'smac', 'dmac', 'hwsrc', 'psrc', 'hwdst', 'pdst', 'Protocol', 'Length'])
            udp_writer.writerow(['Time', 'smac', 'dmac', 'srcIP', 'dstIP', 'ttl', 'sport', 'dport', 'Protocol', 'Length', "Info"])
            # Iterate pcap files and get each packet information to csv files
            sniff(offline=fp, prn=customAction(tcp_writer, arp_writer, udp_writer), store=0)
            print("Successful with "+fp)
    # Notify error
    except Exception as e:
        print("Error with "+fp)
        print(e)
