import os
from pathlib import Path
import multiprocessing
import csv
import pcap_to_csv

# Extension to search for
FILE_TYPE=".pcap"
# Number of cores for multi-processing
CPU_COUNT=6

# List all the files that have FILE_TYPE extension
# starting from [path] directory
def list_files_recursive(path):
    print("looking at "+path)
    file_list=[]
    for fp in os.listdir(path):  # list all file path in current path
        fullpath = os.path.join(path, fp)  # the full directory path of this file path
        if os.path.isdir(fullpath):  # if this file path is a directory
            # Then go inside that directory by recursion
            file_list += list_files_recursive(fullpath)
        # else if this file path is a file and has FILE_TYPE extension
        elif (os.path.isfile(fullpath)) and (os.path.splitext(fp)[-1] == FILE_TYPE): 
            # Then append to the returned list
            file_list.append(fullpath)

    return file_list

if __name__ == '__main__':
    print ("Number of cores",multiprocessing.cpu_count())
    # Return a list of all files with FILE_TYPE extension
    file_list = list_files_recursive('.')
    print ("Found these files: ",file_list)
    # Multi-processing all files in the list
    my_set = set()
    with multiprocessing.Pool(CPU_COUNT) as p:
        r = p.map(generate_packets.read, file_list)
        my_set = my_set.union(r)
        
    with open("packet_types.txt") as file:
        file.write(my_set)
        